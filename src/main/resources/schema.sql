DROP TABLE likes IF EXISTS CASCADE;
DROP TABLE friendship IF EXISTS CASCADE;
DROP TABLE film_genre IF EXISTS CASCADE;
DROP TABLE films IF EXISTS CASCADE;
DROP TABLE mpa IF EXISTS CASCADE;
DROP TABLE genres IF EXISTS CASCADE;
DROP TABLE users IF EXISTS CASCADE;
DROP TABLE feed IF EXISTS CASCADE;
DROP TYPE event_types IF EXISTS;
DROP TYPE operations IF EXISTS;

CREATE TABLE IF NOT EXISTS users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    login VARCHAR(100) NOT NULL UNIQUE,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    birthday DATE,
    created TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS genres (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    created TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS mpa (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    created TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS films (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR(200) NOT NULL,
	description VARCHAR(200) NOT NULL,
	release_date DATE NOT NULL,
	duration INTEGER NOT NULL,
	mpa_id INTEGER NOT NULL REFERENCES mpa (id),
	created TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS film_genre (
	film_id BIGINT REFERENCES films (id),
	genre_id INTEGER REFERENCES genres (id),
	PRIMARY KEY (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS friendship (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	user_id BIGINT REFERENCES users (id),
	friend_id BIGINT REFERENCES users (id),
	created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	CONSTRAINT unique_friendship UNIQUE (user_id, friend_id)
);

CREATE TABLE IF NOT EXISTS likes (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	user_id BIGINT REFERENCES users (id),
	film_id BIGINT REFERENCES films (id),
    CONSTRAINT unique_user_like UNIQUE (user_id, film_id)
);

CREATE TYPE event_types AS ENUM (
    'LIKE', 'REVIEW', 'FRIEND'
);

CREATE TYPE operations AS ENUM (
    'REMOVE', 'ADD', 'UPDATE'
);

CREATE TABLE IF NOT EXISTS feed (
    timestamp TIMESTAMP,
    user_id BIGINT REFERENCES users (id),
    event_type EVENT_TYPES,
    operation OPERATIONS,
    event_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    entity_id BIGINT
);